local Library = {}
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Check if on mobile
local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled

-- Constants adjusted for mobile
local TWEEN_SPEED = 0.15
local CORNER_RADIUS = UDim.new(0, isMobile and 8 or 6)
local MOBILE_SCALE = isMobile and 1.5 or 1 -- Larger scale for mobile

-- Theme
local Theme = {
    Background = Color3.fromRGB(15, 15, 15),
    Secondary = Color3.fromRGB(21, 21, 21),
    ElementBackground = Color3.fromRGB(18, 18, 18),
    TextColor = Color3.fromRGB(157, 157, 157),
    AccentColor = Color3.fromRGB(106, 0, 255),
    AccentGradient = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(106, 0, 255)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(32, 22, 54))
    },
    ToggleGradient = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(122, 122, 122)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(24, 24, 24))
    }
}

-- Utility Functions
local function CreateElement(className, properties)
    local element = Instance.new(className)
    for property, value in pairs(properties) do
        element[property] = value
    end
    return element
end

-- Add touch/click handling
local function AddInteraction(element, callback)
    element.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or 
           input.UserInputType == Enum.UserInputType.MouseButton1 then
            callback()
        end
    end)
end

local function AddCorner(parent, radius)
    local corner = CreateElement("UICorner", {
        CornerRadius = radius or CORNER_RADIUS,
        Parent = parent
    })
    return corner
end

local function AddGradient(parent, colorSequence, rotation)
    local gradient = CreateElement("UIGradient", {
        Color = colorSequence,
        Rotation = rotation or 90,
        Parent = parent
    })
    return gradient
end

function Library.new(title)
    local gui = {
        Tabs = {},
        Windows = {},
        ActiveTab = nil,
    }

    -- Create ScreenGui
    gui.ScreenGui = CreateElement("ScreenGui", {
        Name = "CalistaUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    -- Handle protection
    if syn and syn.protect_gui then
        syn.protect_gui(gui.ScreenGui)
        gui.ScreenGui.Parent = CoreGui
    else
        gui.ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    end

    -- Create Main Frame with mobile adjustments
    gui.Main = CreateElement("Frame", {
        Name = "Main",
        Parent = gui.ScreenGui,
        AnchorPoint = Vector2.new(0.5, 0),
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, 0, isMobile and 0.1 or 0.2, 0),
        Size = UDim2.new(isMobile and 0.8 or 0.3, 0, isMobile and 0.7 or 0.5, 0)
    })
    AddCorner(gui.Main, UDim.new(0, 12))

    -- Create Title with larger text for mobile
    gui.Title = CreateElement("TextLabel", {
        Name = "Title",
        Parent = gui.Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.05, 0, 0.05, 0),
        Size = UDim2.new(0.9, 0, 0.1, 0),
        Font = Enum.Font.GothamBold,
        Text = title or "Calista UI",
        TextColor3 = Theme.TextColor,
        TextSize = isMobile and 24 or 18
    })

    -- Create Tab Container with mobile adjustments
    gui.TabContainer = CreateElement("Frame", {
        Name = "TabContainer",
        Parent = gui.Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.05, 0, 0.171, 0),
        Size = UDim2.new(0.9, 0, isMobile and 0.1 or 0.069, 0)
    })

    local tabListLayout = CreateElement("UIListLayout", {
        Parent = gui.TabContainer,
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0.015, 0)
    })

    -- Create Feature Container with mobile adjustments
    gui.FeatureContainer = CreateElement("ScrollingFrame", {
        Name = "FeatureContainer",
        Parent = gui.Main,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.05, 0, isMobile and 0.3 or 0.273, 0),
        Size = UDim2.new(0.9, 0, isMobile and 0.65 or 0.675, 0),
        ScrollBarThickness = isMobile and 8 or 0,
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    AddCorner(gui.FeatureContainer)

    local featureListLayout = CreateElement("UIListLayout", {
        Parent = gui.FeatureContainer,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(isMobile and 0.05 or 0.035, 0)
    })

    -- Tab Creation Function
    function gui:CreateTab(name)
        local tab = {
            Elements = {},
            Name = name
        }

        -- Create Tab Button with mobile adjustments
        tab.Button = CreateElement("TextButton", {
            Name = name,
            Parent = self.TabContainer,
            BackgroundColor3 = Theme.Secondary,
            Size = UDim2.new(0.2, 0, 0.9, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Theme.TextColor,
            TextSize = isMobile and 18 or 14,
            AutoButtonColor = false
        })
        AddCorner(tab.Button)

        -- Create Tab Container
        tab.Container = CreateElement("Frame", {
            Name = name.."Container",
            Parent = self.FeatureContainer,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false
        })

        -- Toggle Creation Function with mobile adjustments
        function tab:CreateToggle(toggleSettings)
            local toggle = {
                Value = toggleSettings.Default or false,
                Name = toggleSettings.Name,
                Callback = toggleSettings.Callback
            }

            -- Create Toggle Container with larger size for mobile
            toggle.Container = CreateElement("Frame", {
                Name = "ToggleContainer",
                Parent = self.Container,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(0.918, 0, isMobile and 0.15 or 0.118, 0)
            })
            AddCorner(toggle.Container)

            -- Create Toggle Name Label with larger text
            toggle.NameLabel = CreateElement("TextButton", {
                Name = "Name",
                Parent = toggle.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.029, 0, 0.34, 0),
                Size = UDim2.new(0.5, 0, 0.381, 0),
                Font = Enum.Font.Gotham,
                Text = toggle.Name,
                TextColor3 = Theme.TextColor,
                TextSize = isMobile and 18 or 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                AutoButtonColor = false
            })

            -- Create Toggle Button with larger size for mobile
            toggle.Button = CreateElement("Frame", {
                Name = "Toggle",
                Parent = toggle.Container,
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(0.93, 0, 0.486, 0),
                Size = UDim2.new(isMobile and 0.2 or 0.133, 0, isMobile and 0.7 or 0.56, 0)
            })
            AddCorner(toggle.Button, UDim.new(1, 0))
            AddGradient(toggle.Button, Theme.AccentGradient)

            -- Create Toggle Dot with mobile adjustments
            toggle.Dot = CreateElement("Frame", {
                Name = "ToggleDot",
                Parent = toggle.Button,
                BackgroundColor3 = Color3.fromRGB(216, 216, 216),
                Position = toggle.Value and UDim2.new(0.525, 0, 0.087, 0) or UDim2.new(0.075, 0, 0.087, 0),
                Size = UDim2.new(0.403, 0, 0.807, 0)
            })
            AddCorner(toggle.Dot, UDim.new(1, 0))

            -- Toggle Functionality
            function toggle:Set(value)
                toggle.Value = value
                TweenService:Create(toggle.Dot, 
                    TweenInfo.new(TWEEN_SPEED, Enum.EasingStyle.Quad), 
                    {Position = value and UDim2.new(0.525, 0, 0.087, 0) or UDim2.new(0.075, 0, 0.087, 0)}
                ):Play()
                if toggle.Callback then
                    toggle.Callback(value)
                end
            end

            -- Add touch/click handling for the entire container
            AddInteraction(toggle.Container, function()
                toggle:Set(not toggle.Value)
            end)

            return toggle
        end

        -- Slider Creation Function with mobile adjustments
        function tab:CreateSlider(sliderSettings)
            local slider = {
                Value = sliderSettings.Default or 0,
                Min = sliderSettings.Min or 0,
                Max = sliderSettings.Max or 100,
                Name = sliderSettings.Name,
                Callback = sliderSettings.Callback
            }

            -- Create Slider Container with larger size for mobile
            slider.Container = CreateElement("Frame", {
                Name = "SliderContainer",
                Parent = self.Container,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(0.918, 0, isMobile and 0.15 or 0.118, 0)
            })
            AddCorner(slider.Container)

            -- Create Slider Name with larger text
            slider.NameLabel = CreateElement("TextLabel", {
                Name = "Name",
                Parent = slider.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.029, 0, 0.34, 0),
                Size = UDim2.new(0.271, 0, 0.381, 0),
                Font = Enum.Font.Gotham,
                Text = slider.Name,
                TextColor3 = Theme.TextColor,
                TextSize = isMobile and 18 or 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            -- Create Slider Bar with larger touch area
            slider.Bar = CreateElement("Frame", {
                Name = "SliderBar",
                Parent = slider.Container,
                BackgroundColor3 = Theme.ElementBackground,
                Position = UDim2.new(0.4, 0, 0.4, 0),
                Size = UDim2.new(0.5, 0, isMobile and 0.3 or 0.2, 0)
            })
            AddCorner(slider.Bar)

            -- Create Slider Fill
            slider.Fill = CreateElement("Frame", {
                Name = "SliderFill",
                Parent = slider.Bar,
                BackgroundColor3 = Theme.AccentColor,
                Size = UDim2.new(0, 0, 1, 0)
            })
            AddCorner(slider.Fill)
            AddGradient(slider.Fill, Theme.AccentGradient)

            -- Create Value Label with larger text
            slider.ValueLabel = CreateElement("TextLabel", {
                Name = "Value",
                Parent = slider.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.85, 0, 0.34, 0),
                Size = UDim2.new(0.1, 0, 0.381, 0),
                Font = Enum.Font.Gotham,
                Text = tostring(slider.Value),
                TextColor3 = Theme.TextColor,
                TextSize = isMobile and 18 or 14
            })

            -- Slider Functionality
            local function updateSlider(input)
                local pos
                if isMobile then
                    -- Handle touch input
                    pos = math.clamp((input.Position.X - slider.Bar.AbsolutePosition.X) / slider.Bar.AbsoluteSize.X, 0, 1)
                else
                    -- Handle mouse input
                    pos = math.clamp((input.Position.X - slider.Bar.AbsolutePosition.X) / slider.Bar.AbsoluteSize.X, 0, 1)
                end
                local value = math.floor(pos * (slider.Max - slider.Min) + slider.Min)
                slider:Set(value)
            end

            function slider:Set(value)
                value = math.clamp(value, self.Min, self.Max)
                self.Value = value
                self.ValueLabel.Text = tostring(value)
                local pos = (value - self.Min) / (self.Max - self.Min)
                TweenService:Create(self.Fill, 
                    TweenInfo.new(TWEEN_SPEED), 
                    {Size = UDim2.new(pos, 0, 1, 0)}
                ):Play()
                if self.Callback then
                    self.Callback(value)
                end
            end

            -- Handle both touch and mouse input
            local sliding = false
            
            slider.Bar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch or
                   input.UserInputType == Enum.UserInputType.MouseButton1 then
                    sliding = true
                    updateSlider(input)
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch or
                   input.UserInputType == Enum.UserInputType.MouseButton1 then
                    sliding = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if sliding and (input.UserInputType == Enum.UserInputType.Touch or
                              input.UserInputType == Enum.UserInputType.MouseMovement) then
                    updateSlider(input)
                end
            end)

            return slider
        end

        -- Dropdown Creation Function with mobile adjustments
        function tab:CreateDropdown(dropdownSettings)
            local dropdown = {
                Options = dropdownSettings.Options or {},
                Selected = dropdownSettings.Default or "",
                Name = dropdownSettings.Name,
                Callback = dropdownSettings.Callback,
                Open = false
            }

            -- Create Dropdown Container with larger size for mobile
            dropdown.Container = CreateElement("Frame", {
                Name = "DropdownContainer",
                Parent = self.Container,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(0.918, 0, isMobile and 0.15 or 0.118, 0)
            })
            AddCorner(dropdown.Container)

            -- Create Dropdown Name with larger text
            dropdown.NameLabel = CreateElement("TextLabel", {
                Name = "Name",
                Parent = dropdown.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.029, 0, 0.34, 0),
                Size = UDim2.new(0.271, 0, 0.381, 0),
                Font = Enum.Font.Gotham,
                Text = dropdown.Name,
                TextColor3 = Theme.TextColor,
                TextSize = isMobile and 18 or 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })

            -- Create Selected Label with larger text
            dropdown.SelectedLabel = CreateElement("TextLabel", {
                Name = "Selected",
                Parent = dropdown.Container,
                BackgroundTransparency = 1,
                Position = UDim2.new(0.4, 0, 0.34, 0),
                Size = UDim2.new(0.4, 0, 0.381, 0),
                Font = Enum.Font.Gotham,
                Text = dropdown.Selected,
                TextColor3 = Theme.TextColor,
                TextSize = isMobile and 18 or 14
            })

            -- Create Options Container with larger size for mobile
            dropdown.OptionsContainer = CreateElement("Frame", {
                Name = "Options",
                Parent = dropdown.Container,
                BackgroundColor3 = Theme.ElementBackground,
                Position = UDim2.new(0, 0, 1, 5),
                Size = UDim2.new(1, 0, 0, 0),
                ClipsDescendants = true,
                Visible = false,
                ZIndex = 2
            })
            AddCorner(dropdown.OptionsContainer)

            -- Create Options List
            dropdown.OptionsList = CreateElement("UIListLayout", {
                Parent = dropdown.OptionsContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, isMobile and 4 or 2)
            })

            -- Dropdown Functionality
            function dropdown:Set(option)
                if self.Options[option] then
                    self.Selected = option
                    self.SelectedLabel.Text = option
                    if self.Callback then
                        self.Callback(option)
                    end
                end
            end

            function dropdown:Toggle()
                self.Open = not self.Open
                self.OptionsContainer.Visible = self.Open
                
                local totalHeight = #self.Options * (isMobile and 35 or 25) -- Height per option
                TweenService:Create(self.OptionsContainer, 
                    TweenInfo.new(TWEEN_SPEED), 
                    {Size = UDim2.new(1, 0, 0, self.Open and totalHeight or 0)}
                ):Play()
            end

            -- Add options with larger size for mobile
            for _, option in ipairs(dropdown.Options) do
                local optionButton = CreateElement("TextButton", {
                    Name = option,
                    Parent = dropdown.OptionsContainer,
                    BackgroundColor3 = Theme.Secondary,
                    Size = UDim2.new(1, 0, 0, isMobile and 35 or 25),
                    Text = option,
                    TextColor3 = Theme.TextColor,
                    Font = Enum.Font.Gotham,
                    TextSize = isMobile and 18 or 14,
                    ZIndex = 2
                })
                AddCorner(optionButton)

                -- Add touch/click handling
                AddInteraction(optionButton, function()
                    dropdown:Set(option)
                    dropdown:Toggle()
                end)
            end

            -- Add touch/click handling for the container
            AddInteraction(dropdown.Container, function()
                dropdown:Toggle()
            end)

            return dropdown
        end

        -- Add touch/click handling for tab switching
        AddInteraction(tab.Button, function()
            if gui.ActiveTab then
                gui.ActiveTab.Container.Visible = false
                gui.ActiveTab.Button.BackgroundColor3 = Theme.Secondary
            end
            tab.Container.Visible = true
            tab.Button.BackgroundColor3 = Theme.AccentColor
            gui.ActiveTab = tab
        end)

        -- Add to tabs table
        table.insert(self.Tabs, tab)
        
        -- If first tab, make it active
        if #self.Tabs == 1 then
            tab.Container.Visible = true
            tab.Button.BackgroundColor3 = Theme.AccentColor
            gui.ActiveTab = tab
        end

        return tab
    end

    -- Make GUI Draggable (works with both touch and mouse)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        gui.Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    gui.Main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or
           input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Main.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.Main.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch or
           input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    return gui
end

return Library
